#!/usr/bin/env python3

import argparse
import logging
from pathlib import Path
from typing import List

DEFAULT_VERSION = "1.0.0"

logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s.%(msecs)03d - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%dT%H:%M:%S",
)


def main(properties_file: Path, projects: List[str]):
    if not properties_file.is_file():
        raise ValueError(f"Properties file {properties_file} does not exist")

    properties = read_properties(properties_file)
    for project in projects:
        project_key = f"model.{project}.version"
        if project_key not in properties:
            logger.info(
                f"Project ({project_key}) not found in properties file, setting to ({DEFAULT_VERSION})"
            )
            properties[project_key] = DEFAULT_VERSION
        else:
            version = properties[project_key]
            major, minor, patch = version.split(".")
            patch = int(patch) + 1
            properties[project_key] = f"{major}.{minor}.{patch}"
            logger.info(
                f"Updated version for ({project_key}) to ({properties[project_key]})"
            )
            properties[project_key] = properties[project_key]
    write_properties(properties_file, properties)
    
    # Write the file containing the list of changed services, excluding the 'all' project
    changed_file = properties_file.parent / '.changed'
    if 'all' in projects:
        projects.remove('all')
    changed_file.write_text("\n".join(projects))


def read_properties(properties_file: Path) -> dict:
    lines = properties_file.read_text().split()
    # read each line, if it is empty, skip it
    properties = {}
    for line in lines:
        if line.isspace():
            continue
        #  split the line on the first '='
        key, value = line.split("=", 1)
        properties[key.strip()] = value.strip()
    return properties


def write_properties(properties_file: Path, properties: dict):
    properties_text = "\n".join([f"{key}={value}" for key, value in properties.items()])
    properties_file.write_text(properties_text)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Update versions of service model packages controlled via gradle.properties"
    )

    parser.add_argument(
        "--properties",
        "-p",
        dest="properties",
        type=Path,
        required=True,
        help="The gradle.properties file that contains the versions.",
    )

    parser.add_argument(
        "--services",
        "-s",
        dest="services",
        type=str,
        nargs="+",
        required=True,
        help="A list of projects to update the versions of.",
    )

    args = parser.parse_args()

    main(args.properties, sorted(set(args.services)))
